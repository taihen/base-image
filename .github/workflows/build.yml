name: Build, Test & Publish

on:
  # Trigger on pushes to the main branch (for releases)
  push:
    branches: [ main ]
  # Trigger on a schedule (for daily updates)
  schedule:
    - cron: '0 5 * * *'
  # Make the workflow reusable by other workflows
  workflow_call:
    inputs:
      ref:
        description: 'The git ref to checkout for validation'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    outputs:
      base-digest: ${{ steps.extract-digest.outputs.base-digest }}
      glibc-digest: ${{ steps.extract-digest.outputs.glibc-digest }}
      debug-digest: ${{ steps.extract-digest.outputs.debug-digest }}
      has-changes: ${{ steps.compare.outputs.has-changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          # When called by another workflow, use the ref it provides.
          # Otherwise, use the default ref for the event (e.g., main branch).
          ref: ${{ github.event.inputs.ref || github.ref }}
      - name: Get previous digest and SBOM from last successful run
        id: previous
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Try to get the digest and SBOM from the most recent successful workflow run
          echo "Fetching previous digests and SBOMs from last successful workflow run..."

          # Get the most recent successful workflow run
          LAST_RUN=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/actions/workflows/build.yml/runs?status=success&per_page=1" \
            --jq '.workflow_runs[0].id' || echo "")
          if [ -n "$LAST_RUN" ]; then
            echo "Found last successful run: $LAST_RUN"

            # List artifacts from that run
            ARTIFACTS=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/repos/${{ github.repository }}/actions/runs/$LAST_RUN/artifacts")

            # Get base digest artifact
            BASE_DIGEST_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "previous-base-digest") | .id' || echo "")
            if [ -n "$BASE_DIGEST_ARTIFACT_ID" ]; then
              echo "Found previous base digest artifact: $BASE_DIGEST_ARTIFACT_ID"

              # Download the digest artifact
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/actions/artifacts/$BASE_DIGEST_ARTIFACT_ID/zip" \
                > base-digest-artifact.zip

              # Extract and read the digest
              unzip -q base-digest-artifact.zip
              if [ -f digest.txt ]; then
                BASE_DIGEST=$(cat digest.txt)
                echo "base-digest=$BASE_DIGEST" >> $GITHUB_OUTPUT
                echo "Previous base digest found: $BASE_DIGEST"
                rm -f base-digest-artifact.zip digest.txt
              else
                echo "No digest.txt found in base artifact"
                echo "base-digest=" >> $GITHUB_OUTPUT
              fi
            else
              echo "No previous base digest artifact found"
              echo "base-digest=" >> $GITHUB_OUTPUT
            fi

            # Get glibc digest artifact
            GLIBC_DIGEST_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "previous-glibc-digest") | .id' || echo "")
            if [ -n "$GLIBC_DIGEST_ARTIFACT_ID" ]; then
              echo "Found previous glibc digest artifact: $GLIBC_DIGEST_ARTIFACT_ID"

              # Download the digest artifact
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/actions/artifacts/$GLIBC_DIGEST_ARTIFACT_ID/zip" \
                > glibc-digest-artifact.zip

              # Extract and read the digest
              unzip -q glibc-digest-artifact.zip
              if [ -f digest.txt ]; then
                GLIBC_DIGEST=$(cat digest.txt)
                echo "glibc-digest=$GLIBC_DIGEST" >> $GITHUB_OUTPUT
                echo "Previous glibc digest found: $GLIBC_DIGEST"
                rm -f glibc-digest-artifact.zip digest.txt
              else
                echo "No digest.txt found in glibc artifact"
                echo "glibc-digest=" >> $GITHUB_OUTPUT
              fi
            else
              echo "No previous glibc digest artifact found"
              echo "glibc-digest=" >> $GITHUB_OUTPUT
            fi

            # Get debug digest artifact
            DEBUG_DIGEST_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "previous-debug-digest") | .id' || echo "")
            if [ -n "$DEBUG_DIGEST_ARTIFACT_ID" ]; then
              echo "Found previous debug digest artifact: $DEBUG_DIGEST_ARTIFACT_ID"

              # Download the digest artifact
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/actions/artifacts/$DEBUG_DIGEST_ARTIFACT_ID/zip" \
                > debug-digest-artifact.zip

              # Extract and read the digest
              unzip -q debug-digest-artifact.zip
              if [ -f digest.txt ]; then
                DEBUG_DIGEST=$(cat digest.txt)
                echo "debug-digest=$DEBUG_DIGEST" >> $GITHUB_OUTPUT
                echo "Previous debug digest found: $DEBUG_DIGEST"
                rm -f debug-digest-artifact.zip digest.txt
              else
                echo "No digest.txt found in debug artifact"
                echo "debug-digest=" >> $GITHUB_OUTPUT
              fi
            else
              echo "No previous debug digest artifact found"
              echo "debug-digest=" >> $GITHUB_OUTPUT
            fi

            # Get SBOM artifacts
            SBOM_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "previous-sbom") | .id' || echo "")
            if [ -n "$SBOM_ARTIFACT_ID" ]; then
              echo "Found previous SBOM artifact: $SBOM_ARTIFACT_ID"

              # Download the SBOM artifact
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/actions/artifacts/$SBOM_ARTIFACT_ID/zip" \
                > sbom-artifact.zip

              # Extract SBOM
              mkdir -p previous-sbom
              unzip -q sbom-artifact.zip -d previous-sbom/
              echo "Previous SBOM downloaded successfully"
              rm -f sbom-artifact.zip
            else
              echo "No previous SBOM artifact found"
            fi
          else
            echo "No previous successful workflow run found"
            echo "base-digest=" >> $GITHUB_OUTPUT
            echo "glibc-digest=" >> $GITHUB_OUTPUT
            echo "debug-digest=" >> $GITHUB_OUTPUT
          fi
      - name: Build, Publish, and Sign with wolfi-act
        id: build
        uses: wolfi-dev/wolfi-act@main
        env:
          COSIGN_EXPERIMENTAL: '1'
          OCI_HOST: ghcr.io
          OCI_REPO: ${{ github.repository }}
        with:
          packages: apko,cosign
          command: |
            set -e

            # Log in to the GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | apko login "$OCI_HOST" -u "${{ github.actor }}" --password-stdin

            # Create directories for the SBOMs
            mkdir -p sbom-base sbom-glibc sbom-debug
            
            echo "Building base image (latest)..."
            # Publish the base multi-arch image using apko, which also generates an SBOM.
            base_digest=$(apko publish base.yaml "$OCI_HOST/$OCI_REPO" \
              --sbom-path=sbom-base)
            
            echo "Building glibc image..."
            # Publish the glibc multi-arch image using apko, which also generates an SBOM.
            glibc_digest=$(apko publish glibc.yaml "$OCI_HOST/$OCI_REPO:glibc" \
              --sbom-path=sbom-glibc)
            
            echo "Building debug image..."
            # Publish the debug multi-arch image using apko, which also generates an SBOM.
            debug_digest=$(apko publish debug.yaml "$OCI_HOST/$OCI_REPO:debug" \
              --sbom-path=sbom-debug)

            # Consolidate SBOMs into a single output directory
            mkdir -p sbom-output
            for f in sbom-base/*.json; do
              if [ -f "$f" ]; then
                cp "$f" "sbom-output/base_$(basename "$f")"
              fi
            done
            for f in sbom-glibc/*.json; do
              if [ -f "$f" ]; then
                cp "$f" "sbom-output/glibc_$(basename "$f")"
              fi
            done
            for f in sbom-debug/*.json; do
              if [ -f "$f" ]; then
                cp "$f" "sbom-output/debug_$(basename "$f")"
              fi
            done

            # Sign all three image digests using Cosign keyless signing.
            echo "Signing base image..."
            cosign sign --yes "$base_digest"
            echo "Signing glibc image..."
            cosign sign --yes "$glibc_digest"
            echo "Signing debug image..."
            cosign sign --yes "$debug_digest"

            # Save the digests to files that can be read outside the container
            echo "$base_digest" > base-digest.txt
            echo "$glibc_digest" > glibc-digest.txt
            echo "$debug_digest" > debug-digest.txt
      - name: Extract digests
        id: extract-digest
        run: |
          # Read the digests from the files created in the container
          BASE_DIGEST=$(cat base-digest.txt)
          GLIBC_DIGEST=$(cat glibc-digest.txt)
          DEBUG_DIGEST=$(cat debug-digest.txt)
          echo "base-digest=$BASE_DIGEST" >> $GITHUB_OUTPUT
          echo "glibc-digest=$GLIBC_DIGEST" >> $GITHUB_OUTPUT
          echo "debug-digest=$DEBUG_DIGEST" >> $GITHUB_OUTPUT
          echo "Extracted base digest: $BASE_DIGEST"
          echo "Extracted glibc digest: $GLIBC_DIGEST"
          echo "Extracted debug digest: $DEBUG_DIGEST"
      - name: Compare SBOMs
        id: sbom-compare
        run: python3 scripts/compare_sboms.py
      - name: Compare digests and SBOMs
        id: compare
        run: |
          SBOM_CHANGES="${{ steps.sbom-compare.outputs.sbom-changes }}"
          echo "SBOM changes: $SBOM_CHANGES"
          if [ "$SBOM_CHANGES" = true ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in packages"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in packages"
          fi
      - name: Save current digests
        run: |
          mkdir -p current-base-digest current-glibc-digest current-debug-digest
          echo "${{ steps.extract-digest.outputs.base-digest }}" > current-base-digest/digest.txt
          echo "${{ steps.extract-digest.outputs.glibc-digest }}" > current-glibc-digest/digest.txt
          echo "${{ steps.extract-digest.outputs.debug-digest }}" > current-debug-digest/digest.txt
          # Clean up temporary files
          rm -f base-digest.txt glibc-digest.txt debug-digest.txt
      - name: Upload current base digest artifact
        uses: actions/upload-artifact@v5
        with:
          name: previous-base-digest
          path: current-base-digest/digest.txt
          retention-days: 7
          overwrite: true
      - name: Upload current glibc digest artifact
        uses: actions/upload-artifact@v5
        with:
          name: previous-glibc-digest
          path: current-glibc-digest/digest.txt
          retention-days: 7
          overwrite: true
      - name: Upload current debug digest artifact
        uses: actions/upload-artifact@v5
        with:
          name: previous-debug-digest
          path: current-debug-digest/digest.txt
          retention-days: 7
          overwrite: true
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v5
        with:
          name: sbom
          path: sbom-output/
      - name: Upload SBOM for future comparisons
        uses: actions/upload-artifact@v5
        with:
          name: previous-sbom
          path: sbom-output/
          retention-days: 7
          overwrite: true
  test:
    needs: build
    if: success()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        variant: [base, glibc, debug]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64,linux/amd64
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Set test configuration
        id: test-config
        run: |
          if [ "${{ matrix.variant }}" = "base" ]; then
            echo "base-image=${{ needs.build.outputs.base-digest }}" >> $GITHUB_OUTPUT
            echo "expected-user=65532" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.variant }}" = "glibc" ]; then
            echo "base-image=${{ needs.build.outputs.glibc-digest }}" >> $GITHUB_OUTPUT
            echo "expected-user=65532" >> $GITHUB_OUTPUT
          else
            echo "base-image=${{ needs.build.outputs.debug-digest }}" >> $GITHUB_OUTPUT
            echo "expected-user=0" >> $GITHUB_OUTPUT
          fi
      - name: Create test Go application for ${{ matrix.variant }}
        run: |
          mkdir -p test-app
          cat > test-app/main.go << 'EOF'
          package main
          import (
              "fmt"
              "os"
              "runtime"
          )
          func main() {
              fmt.Printf("Hello from base-image test (${{ matrix.variant }})!\n")
              fmt.Printf("OS: %s\n", runtime.GOOS)
              fmt.Printf("Arch: %s\n", runtime.GOARCH)
              fmt.Printf("Go version: %s\n", runtime.Version())
              fmt.Printf("User: %d\n", os.Getuid())
              fmt.Printf("Group: %d\n", os.Getgid())
              // Test that we can read environment variables
              if testVar := os.Getenv("TEST_VAR"); testVar != "" {
                  fmt.Printf("TEST_VAR: %s\n", testVar)
              }
              // Test that we're running as expected user
              expectedUser := ${{ steps.test-config.outputs.expected-user }}
              if os.Getuid() != expectedUser {
                  fmt.Printf("ERROR: Expected UID %d, got %d\n", expectedUser, os.Getuid())
                  os.Exit(1)
              }
              fmt.Println("All tests passed!")
          }
          EOF
      - name: Create test Dockerfile for ${{ matrix.variant }}
        run: |
          cat > test-app/Dockerfile << 'EOF'
          # Declare build args at the top for global scope
          ARG BASE_IMAGE

          # Build stage
          FROM golang:1.23-alpine AS builder
          WORKDIR /build
          COPY main.go .
          # Build for both architectures
          ARG TARGETARCH
          RUN CGO_ENABLED=1 go build -ldflags="-s -w" -o hello main.go

          # Runtime stage using our base image
          FROM $BASE_IMAGE
          COPY --from=builder /build/hello /hello
          # Keep the user as-is from the base image (nonroot for main, root for debug)
          ENTRYPOINT ["/hello"]
          EOF
      - name: Test ${{ matrix.variant }} image on linux/amd64
        run: |
          echo "Testing ${{ matrix.variant }} on linux/amd64..."
          docker buildx build \
            --platform linux/amd64 \
            --build-arg BASE_IMAGE=${{ steps.test-config.outputs.base-image }} \
            --load \
            -t test-app:amd64 \
            test-app/

          # Run the test
          docker run --rm \
            --platform linux/amd64 \
            -e TEST_VAR="Hello from ${{ matrix.variant }} test" \
            test-app:amd64
      - name: Test ${{ matrix.variant }} image on linux/arm64
        run: |
          echo "Testing ${{ matrix.variant }} on linux/arm64..."
          docker buildx build \
            --platform linux/arm64 \
            --build-arg BASE_IMAGE=${{ steps.test-config.outputs.base-image }} \
            --load \
            -t test-app:arm64 \
            test-app/

          # Run the test (will use qemu if not on arm64 host)
          docker run --rm \
            --platform linux/arm64 \
            -e TEST_VAR="Hello from ${{ matrix.variant }} test" \
            test-app:arm64
      - name: Security scan with Trivy for ${{ matrix.variant }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.test-config.outputs.base-image }}
          format: table
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
  release:
    if: (github.event_name == 'push' || github.event_name == 'schedule') && needs.build.outputs.has-changes == 'true'
    needs: [build, test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Generate release tag
        id: tag
        run: |
          # Generate a date-based tag for the release
          TAG="v$(date +'%Y.%m.%d')"
          COUNTER=0

          # Check if tag already exists and increment counter if needed
          while git ls-remote --tags origin | grep -q "refs/tags/${TAG}"; do
            COUNTER=$((COUNTER + 1))
            TAG="v$(date +'%Y.%m.%d').${COUNTER}"
          done
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"
      - name: Download SBOM artifact
        uses: actions/download-artifact@v6
        with:
          name: sbom
          path: sbom-output
      - name: List downloaded SBOMs for debugging
        run: |
          echo "Contents of sbom-output:"
          ls -R sbom-output
      - name: Compare SBOMs and Generate Changelog
        id: sbom-diff
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          pip install requests
          python3 scripts/generate_changelog.py
      - name: Upload SBOM changelog artifact
        uses: actions/upload-artifact@v5
        with:
          name: sbom-changelog
          path: |
            sbom-changelog.md
            sbom-changes.json
          retention-days: 90
      - name: Tag images with release version using wolfi-act
        uses: wolfi-dev/wolfi-act@main
        env:
          OCI_HOST: ghcr.io
          OCI_REPO: ${{ github.repository }}
        with:
          packages: crane
          command: |
            set -e

            # Log in to the GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | crane auth login "$OCI_HOST" -u "${{ github.actor }}" --password-stdin
            TAG="${{ steps.tag.outputs.tag }}"

            # Tag base image with version and latest
            crane tag "${{ needs.build.outputs.base-digest }}" "$TAG"
            crane tag "${{ needs.build.outputs.base-digest }}" "latest"

            # Tag glibc image with version-glibc and glibc
            crane tag "${{ needs.build.outputs.glibc-digest }}" "$TAG-glibc"
            crane tag "${{ needs.build.outputs.glibc-digest }}" "glibc"

            # Tag debug image with version-debug and debug
            crane tag "${{ needs.build.outputs.debug-digest }}" "$TAG-debug"
            crane tag "${{ needs.build.outputs.debug-digest }}" "debug"
            echo "Successfully tagged images:"
            echo "Base: $TAG, latest"
            echo "glibc: $TAG-glibc, glibc"
            echo "Debug: $TAG-debug, debug"
      - name: Create release body
        run: |
          # Read the SBOM changelog
          SBOM_CHANGELOG=$(<sbom-changelog.md)

          # Set variables from GitHub Actions context
          REPO="${{ github.repository }}"
          TAG="${{ steps.tag.outputs.tag }}"
          BASE_DIGEST="${{ needs.build.outputs.base-digest }}"
          GLIBC_DIGEST="${{ needs.build.outputs.glibc-digest }}"
          DEBUG_DIGEST="${{ needs.build.outputs.debug-digest }}"
          cat > release-body.md << RELEASE_EOF
          ## 🚀 Automated Release
          This release includes all three image variants: base (musl), glibc, and debug.
          $SBOM_CHANGELOG

          ### 📦 Container Images
          **Base Image (Production - musl libc)**
          - **Image**: \`ghcr.io/${REPO}:latest\`
          - **Tagged Version**: \`ghcr.io/${REPO}:${TAG}\`
          - **Digest**: \`${BASE_DIGEST}\`
          
          **glibc Image (Production - GNU libc)**
          - **Image**: \`ghcr.io/${REPO}:glibc\`
          - **Tagged Version**: \`ghcr.io/${REPO}:${TAG}-glibc\`
          - **Digest**: \`${GLIBC_DIGEST}\`
          
          **Debug Image (Development)**
          - **Image**: \`ghcr.io/${REPO}:debug\`
          - **Tagged Version**: \`ghcr.io/${REPO}:${TAG}-debug\`
          - **Digest**: \`${DEBUG_DIGEST}\`

          ### 🔐 Verification
          You can verify all image signatures using:
          \`\`\`bash
          # Base image
          cosign verify ${BASE_DIGEST} \\
            --certificate-identity=https://github.com/${REPO}/.github/workflows/build.yml@refs/heads/main \\
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

          # glibc image
          cosign verify ${GLIBC_DIGEST} \\
            --certificate-identity=https://github.com/${REPO}/.github/workflows/build.yml@refs/heads/main \\
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

          # Debug image
          cosign verify ${DEBUG_DIGEST} \\
            --certificate-identity=https://github.com/${REPO}/.github/workflows/build.yml@refs/heads/main \\
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com
          \`\`\`

          ### 📄 Software Bill of Materials (SBOM)
          SBOMs for all three images are attached to this release.

          ### ⚠️ Debug Image Warning
          The debug image should **NEVER** be used in production as it includes debugging tools and runs as root.
          RELEASE_EOF
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body_path: release-body.md
          files: |
            sbom-output/base_*.json
            sbom-output/glibc_*.json
            sbom-output/debug_*.json
            sbom-changelog.md
            sbom-changes.json
          generate_release_notes: false
          draft: false
          prerelease: false
  
