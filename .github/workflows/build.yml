name: Build & Publish Multi-Arch Distroless glibc Base & Debug Images

on:
  push:
    branches: [main]
  schedule:
    # Run daily at 5 AM UTC to pick up the latest package updates from Wolfi
    - cron: "0 5 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Required for keyless signing with Cosign
    outputs:
      main-digest: ${{ steps.extract-digest.outputs.main-digest }}
      debug-digest: ${{ steps.extract-digest.outputs.debug-digest }}
      has-changes: ${{ steps.compare.outputs.has-changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get previous digest and SBOM from last successful run
        id: previous
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Try to get the digest and SBOM from the most recent successful workflow run
          echo "Fetching previous digests and SBOMs from last successful workflow run..."

          # Get the most recent successful workflow run
          LAST_RUN=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/repos/${{ github.repository }}/actions/workflows/build.yml/runs?status=success&per_page=1" \
            --jq '.workflow_runs[0].id' || echo "")

          if [ -n "$LAST_RUN" ]; then
            echo "Found last successful run: $LAST_RUN"
            
            # List artifacts from that run
            ARTIFACTS=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/repos/${{ github.repository }}/actions/runs/$LAST_RUN/artifacts")
            
            # Get main digest artifact
            MAIN_DIGEST_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "previous-main-digest") | .id' || echo "")
            
            if [ -n "$MAIN_DIGEST_ARTIFACT_ID" ]; then
              echo "Found previous main digest artifact: $MAIN_DIGEST_ARTIFACT_ID"
              
              # Download the digest artifact
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/actions/artifacts/$MAIN_DIGEST_ARTIFACT_ID/zip" \
                > main-digest-artifact.zip
              
              # Extract and read the digest
              unzip -q main-digest-artifact.zip
              if [ -f digest.txt ]; then
                MAIN_DIGEST=$(cat digest.txt)
                echo "main-digest=$MAIN_DIGEST" >> $GITHUB_OUTPUT
                echo "Previous main digest found: $MAIN_DIGEST"
                rm -f main-digest-artifact.zip digest.txt
              else
                echo "No digest.txt found in main artifact"
                echo "main-digest=" >> $GITHUB_OUTPUT
              fi
            else
              echo "No previous main digest artifact found"
              echo "main-digest=" >> $GITHUB_OUTPUT
            fi

            # Get debug digest artifact
            DEBUG_DIGEST_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "previous-debug-digest") | .id' || echo "")
            
            if [ -n "$DEBUG_DIGEST_ARTIFACT_ID" ]; then
              echo "Found previous debug digest artifact: $DEBUG_DIGEST_ARTIFACT_ID"
              
              # Download the digest artifact
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/actions/artifacts/$DEBUG_DIGEST_ARTIFACT_ID/zip" \
                > debug-digest-artifact.zip
              
              # Extract and read the digest
              unzip -q debug-digest-artifact.zip
              if [ -f digest.txt ]; then
                DEBUG_DIGEST=$(cat digest.txt)
                echo "debug-digest=$DEBUG_DIGEST" >> $GITHUB_OUTPUT
                echo "Previous debug digest found: $DEBUG_DIGEST"
                rm -f debug-digest-artifact.zip digest.txt
              else
                echo "No digest.txt found in debug artifact"
                echo "debug-digest=" >> $GITHUB_OUTPUT
              fi
            else
              echo "No previous debug digest artifact found"
              echo "debug-digest=" >> $GITHUB_OUTPUT
            fi
            
            # Get SBOM artifacts
            SBOM_ARTIFACT_ID=$(echo "$ARTIFACTS" | jq -r '.artifacts[] | select(.name == "previous-sbom") | .id' || echo "")
            
            if [ -n "$SBOM_ARTIFACT_ID" ]; then
              echo "Found previous SBOM artifact: $SBOM_ARTIFACT_ID"
              
              # Download the SBOM artifact
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/repos/${{ github.repository }}/actions/artifacts/$SBOM_ARTIFACT_ID/zip" \
                > sbom-artifact.zip
              
              # Extract SBOM
              mkdir -p previous-sbom
              unzip -q sbom-artifact.zip -d previous-sbom/
              echo "Previous SBOM downloaded successfully"
              rm -f sbom-artifact.zip
            else
              echo "No previous SBOM artifact found"
            fi
          else
            echo "No previous successful workflow run found"
            echo "main-digest=" >> $GITHUB_OUTPUT
            echo "debug-digest=" >> $GITHUB_OUTPUT
          fi

      - name: Build, Publish, and Sign with wolfi-act
        id: build
        uses: wolfi-dev/wolfi-act@main
        env:
          COSIGN_EXPERIMENTAL: "1"
          OCI_HOST: ghcr.io
          OCI_REPO: ${{ github.repository }}
        with:
          packages: apko,cosign
          command: |
            set -e

            # Log in to the GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | apko login "$OCI_HOST" -u "${{ github.actor }}" --password-stdin

            # Create directories for the SBOMs
            mkdir -p sbom-main sbom-debug

            echo "Building main image..."
            # Publish the main multi-arch image using apko, which also generates an SBOM.
            main_digest=$(apko publish apko.yaml "$OCI_HOST/$OCI_REPO" \
              --sbom-path=sbom-main)

            echo "Building debug image..."
            # Publish the debug multi-arch image using apko, which also generates an SBOM.
            debug_digest=$(apko publish debug.yaml "$OCI_HOST/$OCI_REPO:debug" \
              --sbom-path=sbom-debug)

            # Consolidate SBOMs into a single output directory
            mkdir -p sbom-output
            cp -r sbom-main/* sbom-output/ 2>/dev/null || true
            cp -r sbom-debug/* sbom-output/ 2>/dev/null || true

            # Sign both image digests using Cosign keyless signing.
            echo "Signing main image..."
            cosign sign --yes "$main_digest"

            echo "Signing debug image..."
            cosign sign --yes "$debug_digest"

            # Save the digests to files that can be read outside the container
            echo "$main_digest" > main-digest.txt
            echo "$debug_digest" > debug-digest.txt

      - name: Extract digests
        id: extract-digest
        run: |
          # Read the digests from the files created in the container
          MAIN_DIGEST=$(cat main-digest.txt)
          DEBUG_DIGEST=$(cat debug-digest.txt)
          echo "main-digest=$MAIN_DIGEST" >> $GITHUB_OUTPUT
          echo "debug-digest=$DEBUG_DIGEST" >> $GITHUB_OUTPUT
          echo "Extracted main digest: $MAIN_DIGEST"
          echo "Extracted debug digest: $DEBUG_DIGEST"

      - name: Compare digests
        id: compare
        run: |
          PREVIOUS_MAIN="${{ steps.previous.outputs.main-digest }}"
          CURRENT_MAIN="${{ steps.extract-digest.outputs.main-digest }}"
          PREVIOUS_DEBUG="${{ steps.previous.outputs.debug-digest }}"
          CURRENT_DEBUG="${{ steps.extract-digest.outputs.debug-digest }}"

          echo "Previous main digest: $PREVIOUS_MAIN"
          echo "Current main digest: $CURRENT_MAIN"
          echo "Previous debug digest: $PREVIOUS_DEBUG"
          echo "Current debug digest: $CURRENT_DEBUG"

          # Check if either image has changes
          MAIN_CHANGED=false
          DEBUG_CHANGED=false

          if [ -z "$PREVIOUS_MAIN" ] || [ "$PREVIOUS_MAIN" != "$CURRENT_MAIN" ]; then
            echo "Main image has changes"
            MAIN_CHANGED=true
          fi

          if [ -z "$PREVIOUS_DEBUG" ] || [ "$PREVIOUS_DEBUG" != "$CURRENT_DEBUG" ]; then
            echo "Debug image has changes"
            DEBUG_CHANGED=true
          fi

          if [ "$MAIN_CHANGED" = true ] || [ "$DEBUG_CHANGED" = true ]; then
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected in at least one image"
          else
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "No changes detected in either image"
          fi

      - name: Save current digests
        run: |
          mkdir -p current-main-digest current-debug-digest
          echo "${{ steps.extract-digest.outputs.main-digest }}" > current-main-digest/digest.txt
          echo "${{ steps.extract-digest.outputs.debug-digest }}" > current-debug-digest/digest.txt
          # Clean up temporary files
          rm -f main-digest.txt debug-digest.txt

      - name: Upload current main digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: previous-main-digest
          path: current-main-digest/digest.txt
          retention-days: 7
          overwrite: true

      - name: Upload current debug digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: previous-debug-digest
          path: current-debug-digest/digest.txt
          retention-days: 7
          overwrite: true

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom-output/

      - name: Upload SBOM for future comparisons
        uses: actions/upload-artifact@v4
        with:
          name: previous-sbom
          path: sbom-output/
          retention-days: 7
          overwrite: true

  test:
    needs: build
    if: needs.build.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    strategy:
      matrix:
        variant: [main, debug]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm64,linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set test configuration
        id: test-config
        run: |
          if [ "${{ matrix.variant }}" = "main" ]; then
            echo "base-image=${{ needs.build.outputs.main-digest }}" >> $GITHUB_OUTPUT
            echo "expected-user=65532" >> $GITHUB_OUTPUT
          else
            echo "base-image=${{ needs.build.outputs.debug-digest }}" >> $GITHUB_OUTPUT
            echo "expected-user=0" >> $GITHUB_OUTPUT
          fi

      - name: Create test Go application for ${{ matrix.variant }}
        run: |
          mkdir -p test-app
          cat > test-app/main.go << 'EOF'
          package main

          import (
              "fmt"
              "os"
              "runtime"
          )

          func main() {
              fmt.Printf("Hello from base-image test (${{ matrix.variant }})!\n")
              fmt.Printf("OS: %s\n", runtime.GOOS)
              fmt.Printf("Arch: %s\n", runtime.GOARCH)
              fmt.Printf("Go version: %s\n", runtime.Version())
              fmt.Printf("User: %d\n", os.Getuid())
              fmt.Printf("Group: %d\n", os.Getgid())

              // Test that we can read environment variables
              if testVar := os.Getenv("TEST_VAR"); testVar != "" {
                  fmt.Printf("TEST_VAR: %s\n", testVar)
              }

              // Test that we're running as expected user
              expectedUser := ${{ steps.test-config.outputs.expected-user }}
              if os.Getuid() != expectedUser {
                  fmt.Printf("ERROR: Expected UID %d, got %d\n", expectedUser, os.Getuid())
                  os.Exit(1)
              }

              fmt.Println("All tests passed!")
          }
          EOF

      - name: Create test Dockerfile for ${{ matrix.variant }}
        run: |
          cat > test-app/Dockerfile << 'EOF'
          # Declare build args at the top for global scope
          ARG BASE_IMAGE

          # Build stage
          FROM golang:1.23-alpine AS builder
          WORKDIR /build
          COPY main.go .
          # Build for both architectures
          ARG TARGETARCH
          RUN CGO_ENABLED=1 go build -ldflags="-s -w" -o hello main.go

          # Runtime stage using our base image
          FROM $BASE_IMAGE
          COPY --from=builder /build/hello /hello
          # Keep the user as-is from the base image (nonroot for main, root for debug)
          ENTRYPOINT ["/hello"]
          EOF

      - name: Test ${{ matrix.variant }} image on linux/amd64
        run: |
          echo "Testing ${{ matrix.variant }} on linux/amd64..."
          docker buildx build \
            --platform linux/amd64 \
            --build-arg BASE_IMAGE=${{ steps.test-config.outputs.base-image }} \
            --load \
            -t test-app:amd64 \
            test-app/

          # Run the test
          docker run --rm \
            --platform linux/amd64 \
            -e TEST_VAR="Hello from ${{ matrix.variant }} test" \
            test-app:amd64

      - name: Test ${{ matrix.variant }} image on linux/arm64
        run: |
          echo "Testing ${{ matrix.variant }} on linux/arm64..."
          docker buildx build \
            --platform linux/arm64 \
            --build-arg BASE_IMAGE=${{ steps.test-config.outputs.base-image }} \
            --load \
            -t test-app:arm64 \
            test-app/

          # Run the test (will use qemu if not on arm64 host)
          docker run --rm \
            --platform linux/arm64 \
            -e TEST_VAR="Hello from ${{ matrix.variant }} test" \
            test-app:arm64

      - name: Security scan with Trivy for ${{ matrix.variant }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.test-config.outputs.base-image }}
          format: "table"
          exit-code: "0" # Don't fail on vulnerabilities, just report
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

  release:
    needs: [build, test]
    if: needs.build.outputs.has-changes == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate release tag
        id: tag
        run: |
          # Generate a date-based tag for the release
          TAG="v$(date +'%Y.%m.%d')"
          COUNTER=0

          # Check if tag already exists and increment counter if needed
          while git ls-remote --tags origin | grep -q "refs/tags/${TAG}"; do
            COUNTER=$((COUNTER + 1))
            TAG="v$(date +'%Y.%m.%d').${COUNTER}"
          done

          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $TAG"

      - name: Download SBOM artifact
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: sbom-output

      - name: Compare SBOMs and Generate Changelog
        id: sbom-diff
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Comparing SBOMs to generate changelog..."

          # Create a Python script for SBOM comparison
          cat > compare_sboms.py << 'EOF'
          import json
          import os
          import sys
          import subprocess
          from datetime import datetime
          import requests
          import zipfile
          import io

          def get_latest_release_sboms(repo, token):
              """Download SBOMs from the latest GitHub release."""
              headers = {'Authorization': f'token {token}'}
              
              # Get latest release
              releases_url = f"https://api.github.com/repos/{repo}/releases/latest"
              response = requests.get(releases_url, headers=headers)
              
              if response.status_code == 404:
                  print("No previous release found. This appears to be the first release.")
                  return None, None
              
              release = response.json()
              print(f"Found previous release: {release['tag_name']}")
              
              # Look for SBOM assets
              main_sbom = None
              debug_sbom = None
              
              for asset in release['assets']:
                  if 'sbom' in asset['name'].lower():
                      # Download the asset
                      download_url = asset['browser_download_url']
                      asset_response = requests.get(download_url, headers=headers)
                      
                      # Extract based on filename patterns
                      content = asset_response.content
                      if asset['name'].endswith('.json'):
                          # Direct JSON file
                          try:
                              data = json.loads(content)
                              if 'debug' in asset['name'].lower():
                                  debug_sbom = data
                              else:
                                  main_sbom = data
                          except:
                              pass
                      elif asset['name'].endswith('.zip'):
                          # ZIP file containing SBOMs
                          try:
                              with zipfile.ZipFile(io.BytesIO(content)) as z:
                                  for filename in z.namelist():
                                      if filename.endswith('.json'):
                                          data = json.loads(z.read(filename))
                                          # Try to determine if it's main or debug from filename or content
                                          if 'debug' in filename.lower():
                                              debug_sbom = data
                                          else:
                                              # Check if already assigned, if not assign
                                              if main_sbom is None:
                                                  main_sbom = data
                                              elif debug_sbom is None:
                                                  debug_sbom = data
                          except:
                              pass
              
              return main_sbom, debug_sbom

          def parse_cyclonedx_sbom(sbom):
              """Extract package information from CycloneDX SBOM."""
              packages = {}
              
              if 'components' in sbom:
                  for component in sbom['components']:
                      name = component.get('name', 'unknown')
                      version = component.get('version', 'unknown')
                      
                      # Extract license
                      license_str = 'unknown'
                      if 'licenses' in component:
                          licenses = []
                          for lic in component['licenses']:
                              if 'license' in lic:
                                  if 'id' in lic['license']:
                                      licenses.append(lic['license']['id'])
                                  elif 'name' in lic['license']:
                                      licenses.append(lic['license']['name'])
                          if licenses:
                              license_str = ', '.join(licenses)
                      
                      packages[name] = {
                          'version': version,
                          'license': license_str
                      }
              
              return packages

          def compare_sboms(old_sbom, new_sbom):
              """Compare two SBOMs and return differences."""
              if old_sbom is None:
                  # First release
                  new_packages = parse_cyclonedx_sbom(new_sbom) if new_sbom else {}
                  return {
                      'added': list(new_packages.keys()),
                      'removed': [],
                      'updated': [],
                      'total_packages': len(new_packages),
                      'is_first_release': True
                  }
              
              old_packages = parse_cyclonedx_sbom(old_sbom)
              new_packages = parse_cyclonedx_sbom(new_sbom)
              
              added = []
              removed = []
              updated = []
              
              # Find added and updated packages
              for name, info in new_packages.items():
                  if name not in old_packages:
                      added.append((name, info['version'], info['license']))
                  elif old_packages[name]['version'] != info['version']:
                      updated.append((name, old_packages[name]['version'], info['version']))
              
              # Find removed packages
              for name, info in old_packages.items():
                  if name not in new_packages:
                      removed.append((name, info['version']))
              
              return {
                  'added': added,
                  'removed': removed,
                  'updated': updated,
                  'total_packages': len(new_packages),
                  'is_first_release': False
              }

          def generate_changelog(main_changes, debug_changes):
              """Generate markdown changelog."""
              changelog = []
              
              # Check if this is first release
              if main_changes.get('is_first_release', False):
                  changelog.append("### 🎉 Initial Release\n")
                  changelog.append("This is the first release with SBOM tracking.")
                  changelog.append(f"\n- **Production Image**: {main_changes['total_packages']} packages")
                  changelog.append(f"- **Debug Image**: {debug_changes['total_packages']} packages")
                  return '\n'.join(changelog)
              
              # Check if there are any changes
              has_main_changes = bool(main_changes['added'] or main_changes['removed'] or main_changes['updated'])
              has_debug_changes = bool(debug_changes['added'] or debug_changes['removed'] or debug_changes['updated'])
              
              if not has_main_changes and not has_debug_changes:
                  changelog.append("### 📦 Package Changes\n")
                  changelog.append("ℹ️ **No package changes detected** (metadata or rebuild only)")
                  return '\n'.join(changelog)
              
              # Generate detailed changelog
              changelog.append("### 📦 Package Changes\n")
              
              # Production image changes
              if has_main_changes:
                  changelog.append("#### Production Image\n")
                  
                  if main_changes['updated']:
                      changelog.append(f"**🔄 Updated ({len(main_changes['updated'])} packages)**")
                      for name, old_ver, new_ver in sorted(main_changes['updated']):
                          changelog.append(f"- `{name}`: {old_ver} → {new_ver}")
                      changelog.append("")
                  
                  if main_changes['added']:
                      changelog.append(f"**➕ Added ({len(main_changes['added'])} packages)**")
                      for name, version, license in sorted(main_changes['added']):
                          changelog.append(f"- `{name}` v{version} (License: {license})")
                      changelog.append("")
                  
                  if main_changes['removed']:
                      changelog.append(f"**➖ Removed ({len(main_changes['removed'])} packages)**")
                      for name, version in sorted(main_changes['removed']):
                          changelog.append(f"- `{name}` v{version}")
                      changelog.append("")
              else:
                  changelog.append("#### Production Image\n")
                  changelog.append("No changes\n")
              
              # Debug image changes
              if has_debug_changes:
                  changelog.append("#### Debug Image\n")
                  
                  if debug_changes['updated']:
                      changelog.append(f"**🔄 Updated ({len(debug_changes['updated'])} packages)**")
                      for name, old_ver, new_ver in sorted(debug_changes['updated']):
                          changelog.append(f"- `{name}`: {old_ver} → {new_ver}")
                      changelog.append("")
                  
                  if debug_changes['added']:
                      changelog.append(f"**➕ Added ({len(debug_changes['added'])} packages)**")
                      for name, version, license in sorted(debug_changes['added']):
                          changelog.append(f"- `{name}` v{version} (License: {license})")
                      changelog.append("")
                  
                  if debug_changes['removed']:
                      changelog.append(f"**➖ Removed ({len(debug_changes['removed'])} packages)**")
                      for name, version in sorted(debug_changes['removed']):
                          changelog.append(f"- `{name}` v{version}")
                      changelog.append("")
              else:
                  changelog.append("#### Debug Image\n")
                  changelog.append("No changes\n")
              
              # Summary
              changelog.append("### 📊 Summary")
              changelog.append(f"- **Production**: {main_changes['total_packages']} total packages, "
                             f"{len(main_changes['added'])} added, "
                             f"{len(main_changes['updated'])} updated, "
                             f"{len(main_changes['removed'])} removed")
              changelog.append(f"- **Debug**: {debug_changes['total_packages']} total packages, "
                             f"{len(debug_changes['added'])} added, "
                             f"{len(debug_changes['updated'])} updated, "
                             f"{len(debug_changes['removed'])} removed")
              
              return '\n'.join(changelog)

          def main():
              repo = os.environ.get('GITHUB_REPOSITORY')
              token = os.environ.get('GH_TOKEN')
              
              if not repo or not token:
                  print("Error: GITHUB_REPOSITORY and GH_TOKEN environment variables are required")
                  sys.exit(1)
              
              # Load current SBOMs
              try:
                  # Find the SBOM files in sbom-output
                  main_sbom_path = None
                  debug_sbom_path = None
                  
                  for root, dirs, files in os.walk('sbom-output'):
                      for file in files:
                          if file.endswith('.json'):
                              filepath = os.path.join(root, file)
                              # Try to determine if it's main or debug
                              # Usually the files are named with architecture, so we need to check content
                              with open(filepath, 'r') as f:
                                  content = json.load(f)
                                  # Check if this might be a debug image by looking for debug-related packages
                                  # or by checking the metadata
                                  if 'metadata' in content and 'component' in content['metadata']:
                                      component_name = content['metadata']['component'].get('name', '')
                                      if 'debug' in component_name:
                                          debug_sbom_path = filepath
                                      elif main_sbom_path is None:
                                          main_sbom_path = filepath
                                  elif main_sbom_path is None:
                                      main_sbom_path = filepath
                                  elif debug_sbom_path is None:
                                      debug_sbom_path = filepath
                  
                  if not main_sbom_path:
                      print("Error: Could not find main SBOM in sbom-output/")
                      sys.exit(1)
                  
                  with open(main_sbom_path, 'r') as f:
                      current_main_sbom = json.load(f)
                  
                  current_debug_sbom = None
                  if debug_sbom_path:
                      with open(debug_sbom_path, 'r') as f:
                          current_debug_sbom = json.load(f)
                  
              except Exception as e:
                  print(f"Error loading current SBOMs: {e}")
                  sys.exit(1)
              
              # Get previous release SBOMs
              prev_main_sbom, prev_debug_sbom = get_latest_release_sboms(repo, token)
              
              # Compare SBOMs
              main_changes = compare_sboms(prev_main_sbom, current_main_sbom)
              debug_changes = compare_sboms(prev_debug_sbom, current_debug_sbom) if current_debug_sbom else {'added': [], 'removed': [], 'updated': [], 'total_packages': 0}
              
              # Generate changelog
              changelog = generate_changelog(main_changes, debug_changes)
              
              # Write changelog to file
              with open('sbom-changelog.md', 'w') as f:
                  f.write(changelog)
              
              # Also save as JSON for potential future use
              changes_data = {
                  'main': main_changes,
                  'debug': debug_changes,
                  'generated_at': datetime.utcnow().isoformat()
              }
              with open('sbom-changes.json', 'w') as f:
                  json.dump(changes_data, f, indent=2)
              
              print("SBOM comparison completed successfully")
              print("\nChangelog Preview:")
              print("=" * 50)
              print(changelog)
              print("=" * 50)
              
              # Set output for GitHub Actions
              # GitHub Actions has a limit on output size, so we'll save to env file
              with open(os.environ['GITHUB_ENV'], 'a') as f:
                  # Escape the changelog for GitHub Actions
                  escaped_changelog = changelog.replace('%', '%25').replace('\n', '%0A').replace('\r', '%0D')
                  f.write(f"SBOM_CHANGELOG<<EOF\n{changelog}\nEOF\n")

          if __name__ == '__main__':
              main()
          EOF

          # Run the comparison script
          python3 compare_sboms.py

      - name: Upload SBOM changelog artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom-changelog
          path: |
            sbom-changelog.md
            sbom-changes.json
          retention-days: 90

      - name: Tag images with release version using wolfi-act
        uses: wolfi-dev/wolfi-act@main
        env:
          OCI_HOST: ghcr.io
          OCI_REPO: ${{ github.repository }}
        with:
          packages: crane
          command: |
            set -e

            # Log in to the GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | crane auth login "$OCI_HOST" -u "${{ github.actor }}" --password-stdin

            TAG="${{ steps.tag.outputs.tag }}"

            # Tag main image with version and latest
            crane tag "${{ needs.build.outputs.main-digest }}" "$TAG"
            crane tag "${{ needs.build.outputs.main-digest }}" "latest"

            # Tag debug image with version-debug and debug
            crane tag "${{ needs.build.outputs.debug-digest }}" "$TAG-debug"
            crane tag "${{ needs.build.outputs.debug-digest }}" "debug"

            echo "Successfully tagged images:"
            echo "Main: $TAG, latest"
            echo "Debug: $TAG-debug, debug"

      - name: Create release body
        run: |
          cat > release-body.md << 'RELEASE_EOF'
          ## 🚀 Automated Release

          This release includes both the main distroless image and debug variant.

          ${{ env.SBOM_CHANGELOG }}

          ### 📦 Container Images

          **Main Image (Production)**
          - **Image**: `ghcr.io/${{ github.repository }}:latest`
          - **Tagged Version**: `ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}`
          - **Digest**: `${{ needs.build.outputs.main-digest }}`
          - **Usage**: Minimal distroless image for production use

          **Debug Image (Development)**
          - **Image**: `ghcr.io/${{ github.repository }}:debug`  
          - **Tagged Version**: `ghcr.io/${{ github.repository }}:${{ steps.tag.outputs.tag }}-debug`
          - **Digest**: `${{ needs.build.outputs.debug-digest }}`
          - **Usage**: Debug image with shell and tools for troubleshooting

          ### 🔐 Verification
          You can verify both image signatures using:
          ```bash
          # Main image
          cosign verify ${{ needs.build.outputs.main-digest }} \
            --certificate-identity=https://github.com/${{ github.repository }}/.github/workflows/build.yml@refs/heads/main \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com

          # Debug image  
          cosign verify ${{ needs.build.outputs.debug-digest }} \
            --certificate-identity=https://github.com/${{ github.repository }}/.github/workflows/build.yml@refs/heads/main \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com
          ```

          ### 📄 Software Bill of Materials (SBOM)
          SBOMs for both images are attached to this release.

          ### ⚠️ Debug Image Warning
          The debug image should **NEVER** be used in production as it includes debugging tools and runs as root.
          RELEASE_EOF

          # Save to environment variable
          {
            echo 'RELEASE_BODY<<EOF'
            cat release-body.md
            echo 'EOF'
          } >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: ${{ env.RELEASE_BODY }}
          files: |
            sbom-output/*
            sbom-changelog.md
            sbom-changes.json
          generate_release_notes: false
          draft: false
          prerelease: false
